import java.io.File
import java.nio.file.Files
import java.security.MessageDigest

group 'com.alexmercerind.media_kit_libs_android_video'
version '1.0'

buildscript {
    repositories {
        google()
        mavenCentral()
    }

    dependencies {
        classpath 'com.android.tools.build:gradle:7.3.0'
    }
}

rootProject.allprojects {
    repositories {
        google()
        mavenCentral()
    }
}

apply plugin: 'com.android.library'

android {
    // Conditional for compatibility with AGP <4.2.
    if (project.android.hasProperty("namespace")) {
        namespace 'com.alexmercerind.media_kit_libs_android_video'
    }

    compileSdkVersion 31

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    defaultConfig {
        minSdkVersion 16
    }

    dependencies {
        implementation fileTree(dir: "$buildDir/output", include: "*.jar")
    }
}

task downloadDependencies(type: Exec) {

    // Delete previously created /output subdirectory.

    def outputDir = file("$buildDir/output")
    if (outputDir.exists()) {
        outputDir.deleteDir()
    }
    
    // Download all *.jar dependencies & verify their MD5 checksums.

    def urlDefaultARM64 = "https://github.com/media-kit/libmpv-android-video-build/releases/download/v1.1.3/default-arm64-v8a.jar"
    def urlDefaultARMEABI = "https://github.com/media-kit/libmpv-android-video-build/releases/download/v1.1.3/default-armeabi-v7a.jar"
    def urlDefaultX86_64 = "https://github.com/media-kit/libmpv-android-video-build/releases/download/v1.1.3/default-x86_64.jar"
    def urlDefaultX86 = "https://github.com/media-kit/libmpv-android-video-build/releases/download/v1.1.3/default-x86.jar"

    def destDefaultARM64 = file("$buildDir/v1.1.3/default-arm64-v8a.jar")
    def destDefaultARMEABI = file("$buildDir/v1.1.3/default-armeabi-v7a.jar")
    def destDefaultX86_64 = file("$buildDir/v1.1.3/default-x86_64.jar")
    def destDefaultX86 = file("$buildDir/v1.1.3/default-x86.jar")

    if (!destDefaultARM64.exists()) {
        destDefaultARM64.parentFile.mkdirs()
        destDefaultARM64.withOutputStream { os ->
            os << new URL(urlDefaultARM64).openStream()
        }
    }
    if (!destDefaultARMEABI.exists()) {
        destDefaultARMEABI.parentFile.mkdirs()
        destDefaultARMEABI.withOutputStream { os ->
            os << new URL(urlDefaultARMEABI).openStream()
        }
    }
    if (!destDefaultX86_64.exists()) {
        destDefaultX86_64.parentFile.mkdirs()
        destDefaultX86_64.withOutputStream { os ->
            os << new URL(urlDefaultX86_64).openStream()
        }
    }
    if (!destDefaultX86.exists()) {
        destDefaultX86.parentFile.mkdirs()
        destDefaultX86.withOutputStream { os ->
            os << new URL(urlDefaultX86).openStream()
        }
    }

    def md5DefaultARM64 = MessageDigest.getInstance("MD5").digest(Files.readAllBytes(destDefaultARM64.toPath())).encodeHex().toString()
    def md5DefaultARMEABI = MessageDigest.getInstance("MD5").digest(Files.readAllBytes(destDefaultARMEABI.toPath())).encodeHex().toString()
    def md5DefaultX86_64 = MessageDigest.getInstance("MD5").digest(Files.readAllBytes(destDefaultX86_64.toPath())).encodeHex().toString()
    def md5DefaultX86 = MessageDigest.getInstance("MD5").digest(Files.readAllBytes(destDefaultX86.toPath())).encodeHex().toString()

    if (md5DefaultARM64 != "b2ba098ee9632ba7241e9ede89f17af3") {
        throw new GradleException("media_kit: arm64-v8a JAR verification failed.")
    }
    if (md5DefaultARMEABI != "4f1e51e9e14928f8abd8964cc10b5142") {
        throw new GradleException("media_kit: armeabi-v7a JAR verification failed.")
    }
    if (md5DefaultX86_64 != "0a58c0ee5890b6d0aff5438f5d7a34aa") {
        throw new GradleException("media_kit: x86_64 JAR verification failed.")
    }
    if (md5DefaultX86 != "b1e9e34c00cc324004d65ee5b71e24e3") {
        throw new GradleException("media_kit: x86 JAR verification failed.")
    }

    copy {
        from destDefaultARM64
        into "$buildDir/output"
    }
    copy {
        from destDefaultARMEABI
        into "$buildDir/output"
    }
    copy {
        from destDefaultX86_64
        into "$buildDir/output"
    }
    copy {
        from destDefaultX86
        into "$buildDir/output"
    }
}

assemble.dependsOn(downloadDependencies)
